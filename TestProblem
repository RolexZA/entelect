import networkx as nx
import matplotlib as plt


def extract_data():
    file_hand = open('1.txt')

    line_content = []

    ii = 0
    for line in file_hand:
        line = line.rstrip('\n')
        if ii == 0:
            words = line.split(',')
            line_content.append(words)
        if ii > 0:
            words = list(line)
            line_content.append(words)
        ii = ii + 1

    return line_content


def constraints(first_line_data):
    spaceship_count = int(first_line_data[0][0])
    num_crates = int(first_line_data[0][1])
    num_bases = int(first_line_data[0][2])
    map_width = int(first_line_data[0][3])
    map_height = int(first_line_data[0][4])

    constraint_specs = [spaceship_count, num_crates, num_bases, map_width, map_height]

    return constraint_specs


def create_lower_alphabet():
    var = 'a'
    lower_alphabet = []
    # starting from the ASCII value of 'a' and keep increasing the
    # value by i.
    lower_alphabet = [(chr(ord(var) + i)) for i in range(26)]
    return lower_alphabet


def create_upper_alphabet():
    var = 'A'
    upper_alphabet = []
    # starting from the ASCII value of 'A' and keep increasing the
    # value by i.
    upper_alphabet = [(chr(ord(var) + i)) for i in range(26)]
    return upper_alphabet


upper_alphabet = create_upper_alphabet()
lower_alphabet = create_lower_alphabet()


def find_bases(file_data, constraint_specs, upper_alphabet):
    map_height = constraint_specs[4]
    map_width = constraint_specs[3]
    map_info = file_data[1:]

    map_info.reverse()
    base_nodes = {}

    ii = 0
    for ii in range(map_width):
        jj = 0
        for jj in range(map_height):
            for letter in upper_alphabet:
                if map_info[ii][jj] == letter:
                    to_add = {letter: [jj, ii]}
                    base_nodes.update(to_add)

    return base_nodes


def find_crates(file_data, constraint_specs, lower_alphabet):
    map_height = constraint_specs[4]
    map_width = constraint_specs[3]
    map_info = file_data[1:]

    map_info.reverse()
    crate_nodes = {'s': [0, 0]}

    alphabet = create_upper_alphabet() + create_lower_alphabet()

    ii = 0
    for ii in range(map_width):
        jj = 0
        for jj in range(map_height):
            for letter in lower_alphabet:
                if map_info[ii][jj] == letter:
                    to_add = {letter: [jj, ii]}
                    crate_nodes.update(to_add)

    return crate_nodes


file_data = extract_data()

constraint_specs = constraints(file_data)

bases = find_bases(file_data, constraint_specs, upper_alphabet)
crates = find_crates(file_data, constraint_specs, lower_alphabet)


def create_edge_set(bases, crates):
    edge_set = []

    for base in bases.keys():
        if base != 's':
            edge_weight = bases[base][0] + bases[base][1]
            edge_set.append(('s', base, edge_weight))

        for crate in crates.keys():
            edge_weight = abs(bases[base][0] - crates[crate][0]) + abs(bases[base][1] - crates[crate][1])
            edge_set.append((crate, base, edge_weight))

    return edge_set

def create_edge_dict(bases, crates):
    edge_set = {}

    for base in bases.keys():
        if base != 's':
            edge_weight = bases[base][0] + bases[base][1]
            edge_set.update({('s', base): edge_weight})

        for crate in crates.keys():
            edge_weight = abs(bases[base][0] - crates[crate][0]) + abs(bases[base][1] - crates[crate][1])
            edge_set.update({(crate, base): edge_weight})

    return edge_set

e = create_edge_set(bases, crates)

e_dict = create_edge_dict(bases, crates)

def create_graph(edge_set, edge_dict):
    graph_g = nx.Graph()
    graph_g.add_weighted_edges_from(e)

    pos = nx.spring_layout(graph_g)
    plt.figure()
    shortest_path = nx.shortest_path(graph_g, 's', 'b')
    print(shortest_path)

    nx.draw(graph_g, pos, edge_color='black', width=1, linewidths=1,
            node_size=500, node_color='pink', alpha=0.9,
            labels={node: node for node in graph_g.nodes()})

    nx.draw_networkx_edge_labels(graph_g, pos, edge_labels=e_dict, font_color='red')

    plt.axis('off')
    plt.show()


    #return graph_g

create_graph(e, e_dict)

print('complete')
